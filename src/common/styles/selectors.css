/**
 * Custom, semantic, CSS selectors
 *
 * In Thema the approach to CSS naming is, as much as possible, to
 * use custom selectors for the type of entities being styled and
 * their properties.
 *
 * The top level selectors should target block level semantic elements, and avoid
 * styling generic elements such as `div`s and `span`s. This limitation helps ensure that
 * themes cause minimal conflicts with existing layouts and deeply nested components.
 *
*/
@custom-selector :--pre pre, pre[class*="language-"];

/**
* To tweak or adjust an existing theme, you may override some common CSS variables found in the themes.

* Available CSS variables are:
* --color-accent: Color for accent elements, primarily used to add a brand highlights to the theme.
* --color-key: Color for body text, and other elements using the inherited body text color.
* --color-neutral: Subtle color, usually shades of gray, for element borders and other subtle details.
* --color-stock: Article/Page background color, but also used for other elements.
* --font-family-body: Font-family for paragraphs and other non-headline elements
* --font-family-heading: Font-family for paragraphs and other non-headline elements
* --font-family-mono: Font-family for monospaced text elements such as `pre` and `code`.
* --max-width-media: Maximum width for media content, including images and interactive Code Chunks.
* --max-width: Max width for textual elements and other non-media content.
*
* Note that not all themes make use of all available variables, and that some may expose additional options.
* Please refer to the specific theme documentation.
*/

/**
 * Type selectors
 *
 * For types defined in http://schema.org (e.g. `Article`), or extensions such as,
 * http://schema.stenci.la (e.g. `CodeChunk`), http://bioschemas.org (e.g. `Taxon`) etc.
 *
 * Conventions:
 *
 * - use the same upper camel case as in the schema the type is defined in
 * - use a `[itemtype=...]` selector if possible (i.e. if Encoda encodes it in HTML)
 */
@custom-selector :--Article [itemtype='https://schema.org/Article'];
@custom-selector :--Cite [itemtype='https://schema.stenci.la/Cite'];
@custom-selector :--CiteGroup [itemtype='https://schema.stenci.la/CiteGroup'];
@custom-selector :--CodeChunk stencila-code-chunk;
@custom-selector :--CreativeWork [itemtype='https://schema.org/CreativeWork'];
@custom-selector :--Entity [itemtype='https://schema.stenci.la/Entity'];
@custom-selector :--Organization [itemtype='https://schema.org/Organization'];
@custom-selector :--Person [itemtype='https://schema.org/Person'];
@custom-selector :--PublicationIssue [itemtype='https://schema.org/PublicationIssue'];
@custom-selector :--Thing [itemtype='https://schema.org/Thing'];

/**
 * Property selectors
 *
 * For properties of types defined in schemas. Note that
 * some of these select an entire container property e.g. `authors` and
 * selector for a class, and some select items in those properties
 * e.g. `author` and select for a `itemprop`.
 *
 * Conventions:
 *
 * - use the same lower camel case as in the schema the property is defined in
 * - use a `.class` selector for container properties
 * - use a `[itemprop=...]` selector for singular properties, or items of container properties
 */
@custom-selector :--address [itemprop='address'];
@custom-selector :--affiliation [itemprop='affiliation'];
@custom-selector :--affiliations .affiliations;
@custom-selector :--author [itemprop='author'];
@custom-selector :--authors .authors;
@custom-selector :--citation [itemprop='citation'];
@custom-selector :--datePublished [itemprop='datePublished'];
@custom-selector :--description [itemprop='description'];
@custom-selector :--email [itemprop='email'];
@custom-selector :--emails .emails;
@custom-selector :--familyName [itemprop='familyName'];
@custom-selector :--givenName [itemprop='givenName'];
@custom-selector :--headline [itemprop='headline'];
@custom-selector :--issueNumber [itemprop='issueNumber'];
@custom-selector :--name [itemprop='name'];
@custom-selector :--organizations .organizations;
@custom-selector :--pagination [itemprop='pagination'];
@custom-selector :--references .references;
@custom-selector :--url [itemprop='url'];
