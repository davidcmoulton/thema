/**
 * A script to generate `../themes/themes.ts`
 *
 * Run using `npm run generate:themes`.
 *
 * This doesn't actually build any themes, it just checks that
 * they have the necessary files and makes an index of them.
 */

import fs from 'fs'
import globby from 'globby'
import path from 'path'

if (module.parent === null) generateThemes()

export function generateThemes() {
  const themesDir = path.join(__dirname, '..', 'themes')

  // Get the list of themes
  const themes = globby.sync('*', {
    onlyDirectories: true,
    cwd: themesDir
  })

  // Check each theme has the necessary fules
  themes.forEach(theme => {
    ;['README.md', 'styles.css', ['index.js', 'index.ts']].forEach(file => {
      const files = globby.sync(file, {
        onlyFiles: true,
        cwd: path.join(themesDir, theme)
      })
      if (files.length !== 1) {
        console.error(`Theme "${theme}" must have one "${file}" file`)
        process.exit(1)
      }
    })
  })

  // Write all themes to `themes.ts`
  fs.writeFileSync(
    path.join(__dirname, '..', 'themes', 'themes.ts'),
    `// Generated by generate/${path.basename(__filename)}. Do not edit.

  /**
   * Map of theme Javascript modules
   */
  export const themes: {
    ${themes.map(theme => `${theme}: Promise<unknown>`).join('\n  ')}
  } = {
    ${themes.map(theme => `${theme}: import('./${theme}')`).join(',\n  ')}
  }
  `
  )

  // Insert all themes as <link> elements in the demo HTML
  const indexPath = path.join(__dirname, '..', 'index.html')
  const index = fs.readFileSync(indexPath, 'utf8')
  fs.writeFileSync(
    indexPath,
    index.replace(
      /(<!-- GENERATED-THEME-LINKS-BEGIN -->)[\s\S]*?(<!-- GENERATED-THEME-LINKS-END -->)/gm,
      `$1\n    ${themes
        .map(
          theme =>
            `<link id="${theme}" class="theme" rel="stylesheet" href="themes/${theme}/styles.css" disabled />`
        )
        .join('\n    ')}\n    $2`
    )
  )

}
