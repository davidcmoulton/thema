import fs from 'fs'
import globby from 'globby'
import path from 'path'

if (module.parent === null) {
  const [func, arg1] = process.argv.slice(2)
  if (func === 'create') create(arg1)
  else if (func === 'update') update()
  else console.error(`Unrecognised function: ${func}`)
}

/**
 * Create a new theme folder in `../themes/`.
 *
 * Run using `npm run create:theme -- <name-of-theme>`.
 *
 * Creates the folder and populates with the necessary files
 * containing placeholder content.
 */
function create(name?: string): void {
  // Check that a name has been supplied
  if (name === undefined) {
    console.log(`You must supply a theme name`)
    process.exit(1)
  }

  const themeDir = path.join(__dirname, '..', 'themes', name)

  // Check that the theme does not already exist
  if (fs.existsSync(themeDir)) {
    console.log(`Theme "${name}" already exists: ${themeDir}`)
    process.exit(1)
  } else {
    fs.mkdirSync(themeDir)
  }

  // Create necessary files
  fs.writeFileSync(
    path.join(themeDir, 'README.md'),
    `# ${name[0].toUpperCase()}${name.slice(1)}

<!-- Add a description of your theme and notes for contributors. -->\n`
  )

  fs.writeFileSync(
    path.join(themeDir, 'index.ts'),
    `export function init() {
  // Do any DOM manipulation that your theme needs here
}\n`
  )

  fs.writeFileSync(
    path.join(themeDir, 'styles.css'),
    `/* Add your theme's styles to this file */\n`
  )

  // Update `themes.ts` etc
  update()
}

/**
 * Generate `../themes/themes.ts`.
 *
 * Run using `npm run update:themes`.
 *
 * This doesn't actually build any themes, it just checks that
 * they have the necessary files and makes an index of them.
 */
function update(): void {
  const themesDir = path.join(__dirname, '..', 'themes')

  // Get the list of themes
  const themes = globby.sync('*', {
    onlyDirectories: true,
    cwd: themesDir
  })

  // Check each theme has the necessary fules
  themes.forEach(theme => {
    ;['README.md', 'styles.css', ['index.js', 'index.ts']].forEach(file => {
      const files = globby.sync(file, {
        onlyFiles: true,
        cwd: path.join(themesDir, theme)
      })
      if (files.length !== 1) {
        console.error(`Theme "${theme}" must have one "${file}" file`)
        process.exit(1)
      }
    })
  })

  // Write all themes to `themes.ts`
  fs.writeFileSync(
    path.join(__dirname, '..', 'themes', 'themes.ts'),
    `// Generated by scripts/${path.basename(__filename)}. Do not edit.

/**
 * Map of theme Javascript modules
 */
export const themes: {
  ${themes.map(theme => `${theme}: Promise<unknown>`).join('\n  ')}
} = {
  ${themes.map(theme => `${theme}: import('./${theme}')`).join(',\n  ')}
}\n`
  )

  // Insert all themes as <link> elements in the demo HTML
  const indexPath = path.join(__dirname, '..', 'index.html')
  const index = fs.readFileSync(indexPath, 'utf8')
  fs.writeFileSync(
    indexPath,
    index.replace(
      /(<!-- GENERATED-THEME-LINKS-BEGIN -->)[\s\S]*?(<!-- GENERATED-THEME-LINKS-END -->)/gm,
      `$1\n    ${themes
        .map(
          theme =>
            `<link id="${theme}" class="theme" rel="stylesheet" href="themes/${theme}/styles.css" disabled />`
        )
        .join('\n    ')}\n    $2`
    )
  )
}
